WHY SIGNED INTS ARE USED FOR DIMENSIONS:
============================================================================
C99 Data Type Size Limits (as per <limits.h>) [32-bit]
INT_MAX 	= 2147483647
UINT_MAX 	= 4294967295
LONG_MAX	= 9223372036854775807
ULONG_MAX	= 18446744073709551615
============================================================================
Using signed int/long has drawbacks
> Valid dimensions and thread count values must be > 0;
> Signed types have wasted unnecessary values ( values < 0 )

HOWEVER:

Matrices of dimensions UINT_MAX * UINT_MAX are large, incredible large.
> i.e. UINT_MAX * UINT_MAX : 18,446,744,065,119,617,025‬ elements
  => Matrix elements are stored as IEEE Floats (32-bit / 4 Bytes)
  => MAX_NUM_OF_ELEMENTS would need 590,295,810,083,827,744,800 bits
  => i.e. ~ 73,786,976,260,478,468,100‬‬   B (Bytes)
  =>      ~ 73,786,976,260              GB (Gigabytes)
  =>      ~ 73,786,976                  TB (Terabytes)
  =>      ~ 67,108,863                 TiB (Tebibytes)


Even if we use INT_MAX * INT_MAX matrices
> i.e. INT_MAX * INT_MAX : 4,611,686,014,132,420,609 elements
  => Still stored as 32-bit IEEE Float
  => MAX_NUM_OF_ELEMENTS would need 147,573,952,452,237,459,488 bits
  => i.e. ~ 18,446,744,056,529,682,432   B
  =>      ~ 18,446,744,056              GB
  =>      ~ 18,446,744                  TB
  =>      ~ 16,777,215                 TiB

If we used doubles (IEEE-754), these space requirements would be doubled, as doubles are 64-bit.

As such due to hardware constraints, we use signed integers.

